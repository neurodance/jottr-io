/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Exchange OIDC code for token (optional)
         * @description Optional helper for exchanging OIDC code for JWT. In most enterprise scenarios, use your IdP directly.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TokenRequest"];
                };
            };
            responses: {
                /** @description Token issued */
                200: {
                    headers: {
                        "X-Correlation-Id": components["headers"]["CorrelationId"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TokenResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                429: components["responses"]["RateLimited"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List organizations */
        get: {
            parameters: {
                query?: {
                    "page[after]"?: components["parameters"]["PageAfter"];
                    "page[size]"?: components["parameters"]["PageSize"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        "X-Correlation-Id": components["headers"]["CorrelationId"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrgList"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        /** Create organization */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OrgCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        "X-Correlation-Id": components["headers"]["CorrelationId"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Org"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgId}/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List API keys for an org */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orgId: components["parameters"]["OrgId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        "X-Correlation-Id": components["headers"]["CorrelationId"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["ApiKey"][];
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create API key */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    orgId: components["parameters"]["OrgId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ApiKeyCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        "X-Correlation-Id": components["headers"]["CorrelationId"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiKey"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        "X-Correlation-Id": components["headers"]["CorrelationId"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgId}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List projects */
        get: {
            parameters: {
                query?: {
                    "page[after]"?: components["parameters"]["PageAfter"];
                    "page[size]"?: components["parameters"]["PageSize"];
                };
                header?: never;
                path: {
                    orgId: components["parameters"]["OrgId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectList"];
                    };
                };
            };
        };
        put?: never;
        /** Create project */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    orgId: components["parameters"]["OrgId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ProjectCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{projectId}/work-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List work products */
        get: {
            parameters: {
                query?: {
                    "page[after]"?: components["parameters"]["PageAfter"];
                    "page[size]"?: components["parameters"]["PageSize"];
                };
                header?: never;
                path: {
                    projectId: components["parameters"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorkProductList"];
                    };
                };
            };
        };
        put?: never;
        /** Create work product (metadata) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    projectId: components["parameters"]["ProjectId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["WorkProductCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorkProduct"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List templates */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TemplateList"];
                    };
                };
            };
        };
        put?: never;
        /** Create template */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TemplateCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Template"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/{templateId}/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Render a template into a work product */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    templateId: components["parameters"]["TemplateId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TemplateRenderRequest"];
                };
            };
            responses: {
                /** @description Accepted, job created */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/work-products/{workProductId}/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start a job for a work product (generate|continue|review|transform|validate) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path: {
                    workProductId: components["parameters"]["WorkProductId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["JobCreate"];
                };
            };
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get job */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    jobId: components["parameters"]["JobId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{jobId}/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List runs for a job */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    jobId: components["parameters"]["JobId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["Run"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/runs/{runId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get run */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    runId: components["parameters"]["RunId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Run"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create asset (signed URL or direct upload) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AssetCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Asset"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{assetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get asset metadata */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    assetId: components["parameters"]["AssetId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Asset"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List webhooks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["Webhook"][];
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create webhook endpoint */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["WebhookCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Webhook"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send test delivery */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["WebhookTest"];
                };
            };
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List recent events (polling) */
        get: {
            parameters: {
                query?: {
                    since?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["Event"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stream events (SSE) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description text/event-stream */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Version */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            version?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            error: {
                code: string;
                message: string;
                details?: {
                    [key: string]: unknown;
                };
                correlationId?: string;
            };
        };
        TokenRequest: {
            code?: string;
            /** Format: uri */
            redirectUri?: string;
        };
        TokenResponse: {
            access_token?: string;
            /** @enum {string} */
            token_type?: "Bearer";
            expires_in?: number;
        };
        Org: {
            id?: string;
            name?: string;
            region?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        OrgCreate: {
            name: string;
            region?: string;
        };
        OrgList: {
            items?: components["schemas"]["Org"][];
            /** @description Cursor for next page */
            next?: string | null;
        };
        ApiKey: {
            id?: string;
            name?: string;
            prefix?: string;
            /** Format: date-time */
            createdAt?: string;
            lastEight?: string;
            secret?: string;
        };
        ApiKeyCreate: {
            name: string;
        };
        User: {
            id?: string;
            /** Format: email */
            email?: string;
            name?: string;
        };
        Project: {
            id?: string;
            orgId?: string;
            name?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        ProjectCreate: {
            name: string;
        };
        ProjectList: {
            items?: components["schemas"]["Project"][];
            next?: string | null;
        };
        WorkProduct: {
            id?: string;
            projectId?: string;
            type?: string;
            title?: string;
            /** @enum {string} */
            status?: "draft" | "active" | "archived";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            latestRunId?: string | null;
        };
        WorkProductCreate: {
            type: string;
            title?: string;
            metadata?: {
                [key: string]: unknown;
            };
        };
        WorkProductList: {
            items?: components["schemas"]["WorkProduct"][];
            next?: string | null;
        };
        Template: {
            id?: string;
            name?: string;
            kind?: string;
            version?: string;
            schema?: Record<string, never>;
        };
        TemplateCreate: {
            name: string;
            kind: string;
            version?: string;
            schema?: Record<string, never>;
        };
        TemplateList: {
            items?: components["schemas"]["Template"][];
        };
        TemplateRenderRequest: {
            inputs?: {
                [key: string]: unknown;
            };
        };
        Job: {
            id?: string;
            workProductId?: string;
            /** @enum {string} */
            type?: "generate" | "continue" | "review" | "transform" | "validate";
            /** @enum {string} */
            status?: "queued" | "running" | "succeeded" | "failed" | "canceled";
            /** Format: date-time */
            createdAt?: string;
            lastRunId?: string | null;
        };
        JobCreate: {
            /** @enum {string} */
            type: "generate" | "continue" | "review" | "transform" | "validate";
            params?: {
                [key: string]: unknown;
            };
        };
        Run: {
            id?: string;
            jobId?: string;
            /** @enum {string} */
            status?: "running" | "succeeded" | "failed";
            /** Format: date-time */
            startedAt?: string;
            /** Format: date-time */
            endedAt?: string | null;
            correlationId?: string;
            output?: {
                [key: string]: unknown;
            };
        };
        Asset: {
            id?: string;
            type?: string;
            /** Format: uri */
            url?: string;
            size?: number;
            /** Format: date-time */
            createdAt?: string;
        };
        AssetCreate: {
            type?: string;
            size?: number;
            /** @default false */
            directUpload: boolean;
        };
        Webhook: {
            id?: string;
            /** Format: uri */
            url?: string;
            secret?: string;
            events?: string[];
            active?: boolean;
        };
        WebhookCreate: {
            /** Format: uri */
            url: string;
            secret?: string;
            events: string[];
        };
        WebhookTest: {
            /** @default job.succeeded */
            eventType: string;
        };
        Event: {
            id?: string;
            /** @enum {string} */
            type?: "job.started" | "job.succeeded" | "job.failed" | "run.started" | "run.succeeded" | "run.failed";
            /** Format: date-time */
            occurredAt?: string;
            data?: {
                [key: string]: unknown;
            };
        };
    };
    responses: {
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Too many requests */
        RateLimited: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        OrgId: string;
        ProjectId: string;
        WorkProductId: string;
        TemplateId: string;
        AssetId: string;
        JobId: string;
        RunId: string;
        PageAfter: string;
        PageSize: number;
        IdempotencyKey: string;
    };
    requestBodies: never;
    headers: {
        /** @description Correlation ID propagated end-to-end */
        CorrelationId: string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
